groups:
    - name: kube-apiserver-availability.rules
      interval: 3m
      rules:
        - record: code_verb:apiserver_request_total:increase30d
          expr: avg_over_time(code_verb:apiserver_request_total:increase1h[30d]) * 24 * 30
        - record: code:apiserver_request_total:increase30d
          expr: sum by (cluster, code) (code_verb:apiserver_request_total:increase30d{verb=~"LIST|GET"})
          labels:
            verb: read
        - record: code:apiserver_request_total:increase30d
          expr: sum by (cluster, code) (code_verb:apiserver_request_total:increase30d{verb=~"POST|PUT|PATCH|DELETE"})
          labels:
            verb: write
        - record: cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase1h
          expr: sum by (cluster, verb, scope, le) (increase(apiserver_request_sli_duration_seconds_bucket[1h]))
        - record: cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d
          expr: sum by (cluster, verb, scope, le) (avg_over_time(cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase1h[30d]) * 24 * 30)
        - record: cluster_verb_scope:apiserver_request_sli_duration_seconds_count:increase1h
          expr: sum by (cluster, verb, scope) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase1h{le="+Inf"})
        - record: cluster_verb_scope:apiserver_request_sli_duration_seconds_count:increase30d
          expr: sum by (cluster, verb, scope) (cluster_verb_scope_le:apiserver_request_sli_duration_seconds_bucket:increase30d{le="+Inf"})
        - record: code_resource:apiserver_request_total:rate5m
          expr: sum by (cluster,code,resource) (rate(apiserver_request_total{job="kube-apiserver",verb=~"LIST|GET"}[5m]))
          labels:
            verb: read
        - record: code_resource:apiserver_request_total:rate5m
          expr: sum by (cluster,code,resource) (rate(apiserver_request_total{job="kube-apiserver",verb=~"POST|PUT|PATCH|DELETE"}[5m]))
          labels:
            verb: write
        - record: code_verb:apiserver_request_total:increase1h
          expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="kube-apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"2.."}[1h]))
        - record: code_verb:apiserver_request_total:increase1h
          expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="kube-apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"3.."}[1h]))
        - record: code_verb:apiserver_request_total:increase1h
          expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="kube-apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"4.."}[1h]))
        - record: code_verb:apiserver_request_total:increase1h
          expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="kube-apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"5.."}[1h]))
    - name: kube-apiserver-burnrate.rules
      rules: []
    - name: kube-apiserver-histogram.rules
      rules:
        - record: cluster_quantile:apiserver_request_sli_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.99, sum by (cluster, le, resource) (rate(apiserver_request_sli_duration_seconds_bucket{job="kube-apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[5m]))) > 0
          labels:
            quantile: "0.99"
            verb: read
        - record: cluster_quantile:apiserver_request_sli_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.99, sum by (cluster, le, resource) (rate(apiserver_request_sli_duration_seconds_bucket{job="kube-apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[5m]))) > 0
          labels:
            quantile: "0.99"
            verb: write
    - name: k8s.rules.container_cpu_usage_seconds_total
      rules:
        - record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate5m
          expr: sum by (cluster, namespace, pod, container) (rate(container_cpu_usage_seconds_total{job="cadvisor", image!=""}[5m])) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=""}))
        - record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate
          expr: sum by (cluster, namespace, pod, container) (irate(container_cpu_usage_seconds_total{job="cadvisor", image!=""}[5m])) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=""}))
    - name: k8s.rules.container_memory_working_set_bytes
      rules:
        - record: node_namespace_pod_container:container_memory_working_set_bytes
          expr: container_memory_working_set_bytes{job="cadvisor", image!=""} * on (cluster, namespace, pod) group_left(node) topk by(cluster, namespace, pod) (1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=""}))
    - name: k8s.rules.container_memory_rss
      rules:
        - record: node_namespace_pod_container:container_memory_rss
          expr: container_memory_rss{job="cadvisor", image!=""} * on (cluster, namespace, pod) group_left(node) topk by(cluster, namespace, pod) (1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=""}))
    - name: k8s.rules.container_memory_cache
      rules:
        - record: node_namespace_pod_container:container_memory_cache
          expr: container_memory_cache{job="cadvisor", image!=""} * on (cluster, namespace, pod) group_left(node) topk by(cluster, namespace, pod) (1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=""}))
    - name: k8s.rules.container_memory_swap
      rules:
        - record: node_namespace_pod_container:container_memory_swap
          expr: container_memory_swap{job="cadvisor", image!=""} * on (cluster, namespace, pod) group_left(node) topk by(cluster, namespace, pod) (1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=""}))
    - name: k8s.rules.container_memory_requests
      rules:
        - record: cluster:namespace:pod_memory:active:kube_pod_container_resource_requests
          expr: kube_pod_container_resource_requests{resource="memory",job="kube-state-metrics"} * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
        - record: namespace_memory:kube_pod_container_resource_requests:sum
          expr: sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_requests{resource="memory",job="kube-state-metrics"}) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
    - name: k8s.rules.container_cpu_requests
      rules:
        - record: cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests
          expr: kube_pod_container_resource_requests{resource="cpu",job="kube-state-metrics"} * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
        - record: namespace_cpu:kube_pod_container_resource_requests:sum
          expr: sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_requests{resource="cpu",job="kube-state-metrics"}) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
    - name: k8s.rules.container_memory_limits
      rules:
        - record: cluster:namespace:pod_memory:active:kube_pod_container_resource_limits
          expr: kube_pod_container_resource_limits{resource="memory",job="kube-state-metrics"} * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
        - record: namespace_memory:kube_pod_container_resource_limits:sum
          expr: sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_limits{resource="memory",job="kube-state-metrics"}) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
    - name: k8s.rules.container_cpu_limits
      rules:
        - record: cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits
          expr: kube_pod_container_resource_limits{resource="cpu",job="kube-state-metrics"} * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
        - record: namespace_cpu:kube_pod_container_resource_limits:sum
          expr: sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_limits{resource="cpu",job="kube-state-metrics"}) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
    - name: k8s.rules.pod_owner
      rules:
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: max by (cluster, namespace, workload, pod) (label_replace(label_replace(kube_pod_owner{job="kube-state-metrics", owner_kind="ReplicaSet"}, "replicaset", "$1", "owner_name", "(.*)") * on (cluster, replicaset, namespace) group_left(owner_name) topk by(cluster, replicaset, namespace) (1, max by (cluster, replicaset, namespace, owner_name) (kube_replicaset_owner{job="kube-state-metrics", owner_kind=""})), "workload", "$1", "replicaset", "(.*)"))
          labels:
            workload_type: replicaset
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: max by (cluster, namespace, workload, pod) (label_replace(label_replace(kube_pod_owner{job="kube-state-metrics", owner_kind="ReplicaSet"}, "replicaset", "$1", "owner_name", "(.*)") * on(replicaset, namespace, cluster) group_left(owner_name) topk by(cluster, replicaset, namespace) (1, max by (cluster, replicaset, namespace, owner_name) (kube_replicaset_owner{job="kube-state-metrics", owner_kind="Deployment"})), "workload", "$1", "owner_name", "(.*)"))
          labels:
            workload_type: deployment
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: max by (cluster, namespace, workload, pod) (label_replace(kube_pod_owner{job="kube-state-metrics", owner_kind="DaemonSet"}, "workload", "$1", "owner_name", "(.*)"))
          labels:
            workload_type: daemonset
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: max by (cluster, namespace, workload, pod) (label_replace(kube_pod_owner{job="kube-state-metrics", owner_kind="StatefulSet"}, "workload", "$1", "owner_name", "(.*)"))
          labels:
            workload_type: statefulset
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: group by (cluster, namespace, workload, pod) (label_join(group by (cluster, namespace, job_name, pod, owner_name) (label_join(kube_pod_owner{job="kube-state-metrics", owner_kind="Job"} , "job_name", "", "owner_name")) * on (cluster, namespace, job_name) group_left() group by (cluster, namespace, job_name) (kube_job_owner{job="kube-state-metrics", owner_kind=~"Pod|"}) , "workload", "", "owner_name"))
          labels:
            workload_type: job
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: max by (cluster, namespace, workload, pod) (label_replace(kube_pod_owner{job="kube-state-metrics", owner_kind="", owner_name=""}, "workload", "$1", "pod", "(.+)"))
          labels:
            workload_type: barepod
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: max by (cluster, namespace, workload, pod) (label_replace(kube_pod_owner{job="kube-state-metrics", owner_kind="Node"}, "workload", "$1", "pod", "(.+)"))
          labels:
            workload_type: staticpod
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: group by (cluster, namespace, workload, workload_type, pod) (label_join(label_join(group by (cluster, namespace, job_name, pod) (label_join(kube_pod_owner{job="kube-state-metrics", owner_kind="Job"} , "job_name", "", "owner_name")) * on (cluster, namespace, job_name) group_left(owner_kind, owner_name) group by (cluster, namespace, job_name, owner_kind, owner_name) (kube_job_owner{job="kube-state-metrics", owner_kind!="Pod", owner_kind!=""}) , "workload", "", "owner_name") , "workload_type", "", "owner_kind") OR label_replace(label_replace(label_replace(kube_pod_owner{job="kube-state-metrics", owner_kind="ReplicaSet"} , "replicaset", "$1", "owner_name", "(.+)") * on(cluster, namespace, replicaset) group_left(owner_kind, owner_name) group by (cluster, namespace, replicaset, owner_kind, owner_name) (kube_replicaset_owner{job="kube-state-metrics", owner_kind!="Deployment", owner_kind!=""}) , "workload", "$1", "owner_name", "(.+)") OR label_replace(group by (cluster, namespace, pod, owner_name, owner_kind) (kube_pod_owner{job="kube-state-metrics", owner_kind!="ReplicaSet", owner_kind!="DaemonSet", owner_kind!="StatefulSet", owner_kind!="Job", owner_kind!="Node", owner_kind!=""}) , "workload", "$1", "owner_name", "(.+)") , "workload_type", "$1", "owner_kind", "(.+)"))
    - name: kube-scheduler.rules
      rules:
        - record: cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.99, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job="kube-scheduler"}[5m])) without(instance, pod))
          labels:
            quantile: "0.99"
        - record: cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.99, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job="kube-scheduler"}[5m])) without(instance, pod))
          labels:
            quantile: "0.99"
        - record: cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.99, sum(rate(scheduler_binding_duration_seconds_bucket{job="kube-scheduler"}[5m])) without(instance, pod))
          labels:
            quantile: "0.99"
        - record: cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.9, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job="kube-scheduler"}[5m])) without(instance, pod))
          labels:
            quantile: "0.9"
        - record: cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.9, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job="kube-scheduler"}[5m])) without(instance, pod))
          labels:
            quantile: "0.9"
        - record: cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.9, sum(rate(scheduler_binding_duration_seconds_bucket{job="kube-scheduler"}[5m])) without(instance, pod))
          labels:
            quantile: "0.9"
        - record: cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.5, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job="kube-scheduler"}[5m])) without(instance, pod))
          labels:
            quantile: "0.5"
        - record: cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.5, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job="kube-scheduler"}[5m])) without(instance, pod))
          labels:
            quantile: "0.5"
        - record: cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.5, sum(rate(scheduler_binding_duration_seconds_bucket{job="kube-scheduler"}[5m])) without(instance, pod))
          labels:
            quantile: "0.5"
    - name: node.rules
      rules:
        - record: 'node_namespace_pod:kube_pod_info:'
          expr: topk by(cluster, namespace, pod) (1, max by (cluster, node, namespace, pod) (label_replace(kube_pod_info{job="kube-state-metrics",node!=""}, "pod", "$1", "pod", "(.*)")))
        - record: node:node_num_cpu:sum
          expr: count by (cluster, node) (node_cpu_seconds_total{mode="idle",job="node"} * on (cluster, namespace, pod) group_left(node) topk by(cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:))
        - record: :node_memory_MemAvailable_bytes:sum
          expr: sum(node_memory_MemAvailable_bytes{job="node"} or (node_memory_Buffers_bytes{job="node"} + node_memory_Cached_bytes{job="node"} + node_memory_MemFree_bytes{job="node"} + node_memory_Slab_bytes{job="node"})) by (cluster)
        - record: node:node_cpu_utilization:ratio_rate5m
          expr: avg by (cluster, node) (sum without (mode) (rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal",job="node"}[5m])))
        - record: cluster:node_cpu:ratio_rate5m
          expr: avg by (cluster) (node:node_cpu_utilization:ratio_rate5m)
    - name: kubelet.rules
      rules:
        - record: node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.99, sum(rate(kubelet_pleg_relist_duration_seconds_bucket{job="kubelet"}[5m])) by (cluster, instance, le) * on(cluster, instance) group_left (node) max by (cluster, instance, node) (kubelet_node_name{job="kubelet"}))
          labels:
            quantile: "0.99"
        - record: node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.9, sum(rate(kubelet_pleg_relist_duration_seconds_bucket{job="kubelet"}[5m])) by (cluster, instance, le) * on(cluster, instance) group_left (node) max by (cluster, instance, node) (kubelet_node_name{job="kubelet"}))
          labels:
            quantile: "0.9"
        - record: node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile
          expr: histogram_quantile(0.5, sum(rate(kubelet_pleg_relist_duration_seconds_bucket{job="kubelet"}[5m])) by (cluster, instance, le) * on(cluster, instance) group_left (node) max by (cluster, instance, node) (kubelet_node_name{job="kubelet"}))
          labels:
            quantile: "0.5"

